#!/usr/bin/ruby

require 'pp'
require 'json'
require './cpu.rb'

# TODO:
#  * After finding a solution, try to remove some of the dead instructions
#  * Why does it sometimes run for a long time without finding
#    anything? Are new random solutions being edged out by slightly
#    lower-scoring bug incorrect older solutions?

def signed_rand max
  rand(2 * max - 1) - max + 1
end

def random_instruction
  type = INSTRUCTIONS.sample
  case type
  when LOAD then [LOAD, rand(NUM_REG), signed_rand(5)]
  when MOV  then [ADD,  rand(NUM_REG), rand(NUM_REG)]
  when ADD  then [ADD,  rand(NUM_REG), rand(NUM_REG)]
  when MUL  then [MUL,  rand(NUM_REG), rand(NUM_REG)]
  when DIV  then [DIV,  rand(NUM_REG), rand(NUM_REG)]
  when MOD  then [MOD,  rand(NUM_REG), rand(NUM_REG)]
  when CMP  then [CMP,  rand(NUM_REG), rand(NUM_REG)]
  when JMP  then [JMP,  signed_rand(15)]
  when JIF  then [JMP,  signed_rand(15), COMPARISON_TYPES.sample]
  when HALT then [HALT]
  else bad_instruction type
  end
end

def random_program length
  Array.new(length) {random_instruction}
end

def mutate_program prog
  10.times {
    case rand 10
    when 0 then prog.delete_at rand(prog.size)
    when 1...4 then prog.insert rand(prog.size + 1), random_instruction
    when 4...10
      instr = prog.sample
      next unless instr
      case instr[0]
      when LOAD
        case rand 2
        when 1 then instr[1] = rand(NUM_REG)
        when 0 then instr[2] += signed_rand 5
        end
      when MOV, ADD, MUL, DIV, MOD, CMP
        case rand 2
        when 0 then instr[1] = rand(NUM_REG)
        when 1 then instr[2] = rand(NUM_REG)
        end
      when JMP
        instr[1] += signed_rand 8
      when JIF
        case rand 2
        when 0 then instr[1] += signed_rand 8
        when 1 then instr[2] = COMPARISON_TYPES.sample
        end
      when HALT
      else
        bad_instruction instr[0]
      end
    end
  }
end

def run_evolution num_generations,
                  population_size,
                  children_per_parent,
                  generate_individual,
                  mutate_individual,
                  score_individual
  population = []
  num_generations.times {
    return population[0][1] if population.size > 0 and population[0][0] == 0
    children = population.flat_map {|parent_score, parent|
      Array.new(children_per_parent) {
        child = mutate_individual.call parent
        child_score = score_individual.call child
        [child_score, child]
      }
    }
    random = Array.new(population_size) {
      individual = generate_individual.call
      score = score_individual.call individual
      [score, individual]
    }
    population = (population + children + random).sort_by {|x| x[0]}[0...population_size]
  }
  nil
end

def goal n
  5 * n
end

solution = run_evolution 2000,
                         70,
                         4,
                         lambda {random_program 5},
                         lambda {|prog|
  copy = prog.map(&:dup)
  mutate_program copy
  copy
},
                         lambda {|prog|
  10.times.map {|n|
    result = run_program(prog, n, 30)
    result ? (goal(n) - result).abs : 9999999999
  }.reduce(&:+)
}

if solution
  json = JSON.generate(solution).gsub("],", "],\n ")
  puts json
  File.write 'a.out', json
else
  puts "Failed"
end
